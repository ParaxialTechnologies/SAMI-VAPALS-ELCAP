{% extends 'layout.jinja2' %}
{% import 'forms.jinja2' as f %}
{% block title %}{{ title | escape }}{% endblock %}

{% block body %}
    {% include '_messages.jinja2' %}
    <div class="container-fluid" style="max-width:1550px">
        <h2 class="panel-title">Document Upload</h2>
        <form action="{{ formPage+".html" if mockup else "/vapals" }}" method="post" enctype="multipart/form-data">
            <input type="hidden" name="samiroute" value="fileupload"/>
            <input type="hidden" name="studyid" value="@@SID@@"/>
            <input type="hidden" name="site" value="@@SITE@@"/>
            <input type="hidden" name="form" value="@@FORMKEY@@"/>
            <input type="hidden" name="pdtitle" value=""/>
        <div class="row">
            <div class="col-sm-12 col-md-6 col-lg-4">
                <div class="form-group">
                    <label>
                        Select a file
                    </label>
                    <input type="file" id="file" name="file" required="required"
                           accept="text/csv, application/csv, application/vnd.ms-excel, text/plain, text/x-csv, image/*, .pdf">
                    <small class="form-text text-muted">Text, CSV, Excel, PDF and Images are supported</small>
                </div>
            </div>
        </div>
            <div class="row">
                <div class="col-md-3 col-sm-12">
                    <div class="form-group">
                        <label>
                            Document Date
                        </label>
                        {{ f.datepicker('pddos', 'past', true) }}
                    </div>
                </div>
                <div class="col-md-3 col-sm-12">
                    <div class="form-group">
                        <label for="pdtype" class="control-label required">Document Type</label>
                        <select name="pdtype" id="pdtype" class="form-control" required="required">
                            <option value=""></option>
                            <option value="c">CT Chest</option>
                            <option value="p">PET-CT</option>
                            <option value="b">Biopsy</option>
                            <option value="s">Surgical Pathology</option>
                            <option value="a">Operative Report</option>
                            <option value="d">Discharge Summary</option>
                            <option value="t">Treatment Summary</option>
                            <option value="f">PFT</option>
                            <option value="m">Molecular Pathology</option>
                            <option value="r">Bronchoscopy</option>
                            <option value="cs">Consent Form</option>
                            <option value="o">Other</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-3 col-sm-12">
                    <div class="form-group">
                        {{ f.inputText('pdtypeother', 'Other', {}, true) }}
                    </div>
                </div>
                <div class="col-md-3 col-sm-12">
                    <div class="form-group">
                        {{ f.inputText('pdtitle-text','Document Title', {'disabled':'disabled', 'placeholder':'will be generated'}) }}
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6 col-sm-12">
                    <div class="form-group">
                        <label for="pddesc">Description</label>
                        <textarea name="pddesc" id="pddesc" class="form-control"></textarea>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="pull-right">
                        <input type="submit" value="Upload" class="btn btn-primary" id="submit-button">
                    </div>
                </div>
            </div>
        </form>
    </div>
    <script>
        $(function () {
            $("#pdtype").conditionallyEnable({sourceValues: "o", enable: "#pdtypeother"}); // other indication
            createFormValidator();
            $("#pdtype, #pdtypeother,pddos").on('change', function () {
                const fileName = generateDocumentTitle();
                $("#pdtitle-text").val(fileName);
                $("#pdtitle").val(fileName);
            })
        })

        function createFormValidator() {

            const $form = $('form');

            // for certain validators that use multiple inputs like checkboxes and radio groups, change the location
            // of the error icon to be based on the form-group element, instead of being immediately adjacent to the
            // first control in that group
            $form.formValidation({
                    fields: {
                        file: {validators: {notEmpty: {message: 'File is required'}}},
                        pddos: {
                            validators: {
                                notEmpty: {message: 'Document date is required'},
                                date: {max: VAPALS.todaysDate(), message: 'Document date must not be in the future'}
                            }
                        },
                        pdtype: {validators: {notEmpty: {message: 'Document type is required'}}},
                        pdtypeother: {validators: {notEmpty: {message: 'Document other type is required'}}},
                        {#pdtitle: {validators: {notEmpty: {message: 'Document title is required'}}},#}
                    },
                    plugins: {
                        declarative: new FormValidation.plugins.Declarative(),
                        trigger: new FormValidation.plugins.Trigger(),
                        bootstrap3: new FormValidation.plugins.Bootstrap3(),
                        submitButton: new FormValidation.plugins.SubmitButton(),
                        defaultSubmit: new FormValidation.plugins.DefaultSubmit(),
                        excluded: new FormValidation.plugins.Excluded(), //disable validators on hidden, disabled fields
                        icon: new FormValidation.plugins.Icon({
                            valid: '',
                            invalid: 'glyphicon glyphicon-remove',
                            validating: 'glyphicon glyphicon-refresh'
                        })
                    }
                }
            );

            const fv = $form.data('formValidation');
            fv.on('core.form.invalid', VAPALS.autoScrollToErrorField);
            fv.on('core.element.validated', VAPALS.hideSuccessFormatting);

            return fv;
        }

        function generateDocumentTitle(i) {
            // generate or update doc title
            const studyId = $("[name=studyid]").val();
            const $docTypeOption = $('#pdtype').find(":selected");
            let docTypeDesc;

            if ($docTypeOption.val() === 'o') {
                docTypeDesc = $("#pdtypeother").val();
            } else {
                docTypeDesc = $docTypeOption.text().trim();
            }

            const documentDate = $("#pddos").val();

            if (documentDate && studyId && docTypeDesc) {
                const docDate = moment(documentDate, VAPALS.DATE_FORMAT).format('MM-DD-YYYY');
                return docDate + ' ' + studyId + ' ' + docTypeDesc;
            }
        }
    </script>
{% endblock %}